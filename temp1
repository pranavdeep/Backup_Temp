//*****************************************************************************
//
// hello.c - Simple hello world example.
//
// Copyright (c) 2012-2017 Texas Instruments Incorporated.  All rights reserved.
// Software License Agreement
// 
// Texas Instruments (TI) is supplying this software for use solely and
// exclusively on TI's microcontroller products. The software is owned by
// TI and/or its suppliers, and is protected under applicable copyright
// laws. You may not combine this software with "viral" open-source
// software in order to form a larger program.
// 
// THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
// NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
// NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
// CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
// DAMAGES, FOR ANY REASON WHATSOEVER.
// 
// This is part of revision 2.1.4.178 of the EK-TM4C123GXL Firmware Package.
//
//*****************************************************************************

#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "inc/hw_i2c.h"
#include "inc/hw_ints.h"
#include "driverlib/ssi.h"
#include "driverlib/interrupt.h"
#include "driverlib/debug.h"
#include "driverlib/fpu.h"
#include "driverlib/gpio.h"
#include "driverlib/pin_map.h"
#include "driverlib/rom.h"
#include "driverlib/sysctl.h"
#include "driverlib/uart.h"
#include "utils/uartstdio.h"
//#include "drivers/pinout.h"


#ifdef DEBUG
void
__error__(char *pcFilename, uint32_t ui32Line)
{
}
#endif


#define NUM_SSI_DATA  4
uint32_t g_ui32SysClock,ADC=0,IF=0, rgchk=0, gpconfig=0,ch[4],setup[4],filter[4],offset[4],gain[4], ID2;

#define NVIC_ST_CTRL_R      (*((volatile unsigned long *)0xE000E010))
#define NVIC_ST_RELOAD_R    (*((volatile unsigned long *)0xE000E014))
#define NVIC_ST_CURRENT_R   (*((volatile unsigned long *)0xE000E018))


#define Button_PERIPH SYSCTL_PERIPH_GPIOF
#define ButtonBase GPIO_PORTF_BASE
#define Button GPIO_PIN_4
#define ButtonInt GPIO_INT_PIN_4


#define ID 0x47
#define ADC 0x41
#define IFMODE 0x42
#define RGCHK 0x43 // 24 bit
#define GPCONFIG 0x46
#define CH0 0x50
#define CH1 0x51
#define CH2 0x52
#define CH3 0x53
#define SETUP0 0x60
#define SETUP1 0x61
#define SETUP2 0x62
#define SETUP3 0x63
#define FILTER0 0x68
#define FILTER1 0x69
#define FILTER2 0x6A
#define FILTER3 0x6B
#define OFFSET0 0x70 // 24 bit
#define OFFSET1 0x71 // 24 bit
#define OFFSET2 0x72 // 24 bit
#define OFFSET3 0x73 // 24 bit
#define GAIN0 0x78 // 24 bit
#define GAIN1 0x79 // 24 bit
#define GAIN2 0x7A // 24 bit
#define GAIN3 0x7B // 24 bit

#define DATA 0x44 //24 bit





float temp2 = 0;
uint32_t pui32DataRx[NUM_SSI_DATA];
volatile uint_fast8_t ui8Delay;

uint32_t pui32DataTx[NUM_SSI_DATA];
uint32_t ui32Index;
uint32_t ID_REGISTER[3];
uint32_t temp,temp3,mask,k,flag=0,p=0,ifm=0 ;
int register_value=0;
char a;

void ISR();
int Read16Register(uint32_t word,int delay);
int Read24Register(uint32_t word,int delay);
void Write16Register(uint32_t word);
void Write8Register(uint32_t word);
void PortFIntHandler();
void Reset();
void UARTIntHandler();
void data_speed();

//*****************************************************************************
//
// Configure the UART and its pins.  This must be called before UARTprintf().
//
//*****************************************************************************






void ConfigureUART(void)
{
    //
    // Enable the GPIO Peripheral used by the UART.
    //
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);

    //
    // Enable UART0
    //
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);

    //
    // Configure GPIO Pins for UART mode.
    //
    GPIOPinConfigure(GPIO_PA0_U0RX);
    GPIOPinConfigure(GPIO_PA1_U0TX);
    GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);

    //
    // Use the internal 16MHz oscillator as the UART clock source.
    //
    UARTClockSourceSet(UART0_BASE, UART_CLOCK_PIOSC);

    //
    // Initialize the UART for console I/O.
    //
    UARTStdioConfig(0, 115200, 16000000);
    UARTEnable(UART0_BASE);

    UARTprintf("UART config successful\n");
}


int main(void)
{
    int a=0,b=0;
    //g_ui32SysClock = SysCtlClockFreqSet((SYSCTL_XTAL_25MHZ|SYSCTL_OSC_MAIN|SYSCTL_USE_PLL |SYSCTL_CFG_VCO_480), 80000000);//Sets the clock Frequency
//    SysCtlClockSet(SYSCTL_SYSDIV_1 | SYSCTL_USE_OSC | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);
    SysCtlClockSet(SYSCTL_SYSDIV_2_5|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN); // Sets the clock at 80MHz
    ConfigureUART();

    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
//    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOA)){}
    SysCtlPeripheralEnable(SYSCTL_PERIPH_SSI2);
//    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_SSI2)){}
//    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);
//    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOD)){}
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);


    GPIOPinConfigure(GPIO_PB4_SSI2CLK);
    GPIOPinConfigure(GPIO_PB5_SSI2FSS);
    GPIOPinConfigure(GPIO_PB6_SSI2RX);
    GPIOPinConfigure(GPIO_PB7_SSI2TX);

    GPIOPinTypeSSI(GPIO_PORTB_BASE, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);

    UARTprintf("%d\n",SysCtlClockGet());
    SSIConfigSetExpClk(SSI2_BASE, SysCtlClockGet(), SSI_FRF_MOTO_MODE_3,  SSI_MODE_MASTER, 10000000, 8);

//    SSIAdvModeSet(SSI2_BASE, SSI_ADV_MODE_READ_WRITE);
    SSIEnable(SSI2_BASE);


    while(SSIDataGetNonBlocking(SSI2_BASE, &pui32DataRx[0]))
       {
       }
    Reset();
//    SysCtlDelay(30000); //approx = 1170000 nanoseconds = 1.1.7 ms
//    register_value = Read16Register(ID,1); // Reading ID Register
//    UARTprintf("ID Value=%d\n",register_value);


    GPIOPinTypeGPIOInput(ButtonBase, Button);
    GPIOPadConfigSet(ButtonBase ,Button,GPIO_STRENGTH_2MA,GPIO_PIN_TYPE_STD_WPU);
    GPIOIntTypeSet(GPIO_PORTF_BASE,GPIO_PIN_4,GPIO_LOW_LEVEL);
    GPIOIntRegister(GPIO_PORTF_BASE,PortFIntHandler);
    GPIOIntEnable(GPIO_PORTF_BASE, GPIO_INT_PIN_4);
    IntEnable(INT_GPIOF);
    IntPrioritySet(INT_UART0,0x00);
    IntPrioritySet(INT_GPIOA,0x20);
    IntMasterEnable();


    IntEnable(INT_UART0);
    UARTIntEnable(UART0_BASE, UART_INT_RX | UART_INT_RT);



    GPIOPinTypeGPIOInput(GPIO_PORTA_BASE, GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3);
    GPIOIntTypeSet(GPIO_PORTA_BASE,GPIO_PIN_2,GPIO_FALLING_EDGE);
    IntEnable(INT_GPIOA);
    GPIOIntEnable(GPIO_PORTA_BASE, GPIO_PIN_2);

while(1)
    {
//        UARTprintf("IDLE STATE\n");
//        Reset();

//        SysCtlDelay(10);

    }

      return(0);
}

void ISR()
{
//  UARTprintf("Interrupt Occurred\n");
    GPIOIntClear(GPIO_PORTA_BASE,GPIO_PIN_2);
    GPIOIntDisable(GPIO_PORTA_BASE, GPIO_PIN_2);
    IntDisable(INT_GPIOA);
//  SysCtlDelay(10);
    GPIOIntDisable(GPIO_PORTF_BASE, GPIO_INT_PIN_4);
    while(SSIDataGetNonBlocking(SSI2_BASE, &pui32DataRx[0])) {}

    SSIDataPut(SSI2_BASE, 0x44);
    SSIDataGet(SSI2_BASE, pui32DataRx);//Reading dummy
//    while(SSIBusy(SSI2_BASE)){}
    SSIDataPut(SSI2_BASE,0x00);//Writing dummy
    SSIDataGet(SSI2_BASE, &pui32DataRx[0]);//Reading the actual value
    //while(SSIBusy(SSI2_BASE)){}
    SSIDataPut(SSI2_BASE,0x00);//Writing dummy
    SSIDataGet(SSI2_BASE, &pui32DataRx[1]);//Reading the actual value
    //while(SSIBusy(SSI2_BASE)){}
    SSIDataPut(SSI2_BASE,0x00);//Writing dummy
    SSIDataGet(SSI2_BASE, &pui32DataRx[2]);//Reading the actual value
    SSIDataPut(SSI2_BASE,0x00);//Writing dummy
    SSIDataGet(SSI2_BASE, &pui32DataRx[3]);//Reading the actual value

//    temp = pui32DataRx[0] <<16  | pui32DataRx[1] << 8 | pui32DataRx[2] ;

    temp = pui32DataRx[0] <<24  | pui32DataRx[1] << 16 | pui32DataRx[2] <<8 | pui32DataRx[3] ;
    temp2 = 0.00000000116415321826934814453125 * temp; // 5/2^32
//  temp2 = (0.000000298023223876953125 * temp);// 5/2^24
//  temp2 = (float)(0.000000298023223876953125 * register_value); // 5/2^24
    UARTprintf("ADC Value=%d\n",temp);

    GPIOIntEnable(GPIO_PORTA_BASE, GPIO_PIN_2);
    GPIOIntEnable(GPIO_PORTF_BASE, GPIO_INT_PIN_4);
    IntEnable(INT_GPIOA);
    IntEnable(INT_GPIOF);
}

int Read24Register(uint32_t word,int delay)
{
    int reg_value=0;
    SSIDataPut(SSI2_BASE,word);//Command word To read ID register
    SSIDataGet(SSI2_BASE,ID_REGISTER);
    SSIDataPut(SSI2_BASE,0x00);//Dummy data
    SSIDataGet(SSI2_BASE,&ID_REGISTER[0]);
    SSIDataPut(SSI2_BASE,0x00);//Dummy data
    SSIDataGet(SSI2_BASE,&ID_REGISTER[1]);
    SSIDataPut(SSI2_BASE,0x00);//Dummy data
    SSIDataGet(SSI2_BASE,&ID_REGISTER[2]);
    reg_value = ID_REGISTER[0]<<16 | ID_REGISTER[1] <<8 | ID_REGISTER[2] ;
//    SysCtlDelay(delay);
    while(SSIBusy(SSI2_BASE) )
    {
    UARTprintf("SSI Busy\n");
    }
    return reg_value;
}

void Write16Register(uint32_t word)
{

    uint32_t wbuf[2];
    wbuf[0] = word>>8;//MSB
    wbuf[1] = word & 0x00FF;//LSB
    Write8Register(wbuf[0]);//sending MSB first
    Write8Register(wbuf[1]);//sending MSB next
}

void Write8Register(uint32_t word)
{
//    word=word-64;
    SSIDataPut(SSI2_BASE,word);
    SSIDataGet(SSI2_BASE,ID_REGISTER);//Reading dummy
}


int Read16Register(uint32_t word,int delay)
 {
     int reg_value=0;
     SSIDataPut(SSI2_BASE,word);//Command word To read a register
     SSIDataGet(SSI2_BASE,ID_REGISTER);//Dummy
     SSIDataPut(SSI2_BASE,0x00);//Dummy data
     SSIDataGet(SSI2_BASE,&ID_REGISTER[0]);//Actual read of MSB 8 bis
     SSIDataPut(SSI2_BASE,0x00);//Dummy data
     SSIDataGet(SSI2_BASE,&ID_REGISTER[1]);//Actual read of LSB 8 bits
     reg_value = ID_REGISTER[0]<<8 | ID_REGISTER[1];// bit manipulation
     SysCtlDelay(delay);
     while(SSIBusy(SSI2_BASE))
     {
//     UARTprintf("SSI Busy Reading Reigster\n");
     }
     return reg_value;
  }


void PortFIntHandler()
{
    uint32_t value=0;
    uint8_t status,state=0;

    GPIOIntDisable(GPIO_PORTF_BASE, GPIO_INT_PIN_4);
    GPIOIntClear(ButtonBase,status);

  //   To read WL=32
      ID2 = Read16Register(IFMODE,1); // Reading IFMode Register
    UARTprintf("IF 1=%d\n",ID2);
    Write8Register(IFMODE-64);//Write to communications register
    Write16Register(0x02); //WL=32
    ID2 = Read16Register(IFMODE,1);
    UARTprintf("IF 2=%d\n",ID2); // Reading IFMode Register
//    Reset();
    while(GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_4)==0)
        {
        }
    GPIOIntClear(GPIO_PORTF_BASE,GPIO_INT_PIN_4);
    GPIOIntEnable(GPIO_PORTF_BASE, GPIO_INT_PIN_4);

}

void Reset()
{
    int i=0;
    for(i=0;i<8;i++)
    {
        SSIDataPut(SSI2_BASE,0xFF);//Command word To reset
    }
    UARTprintf("Reset complete\n");
    SysCtlDelay(1);

}

void UARTIntHandler(void)
{
    UARTprintf("UART interrupt occured\n");
    uint32_t ui32Status;

    ui32Status = UARTIntStatus(UART0_BASE, true);

    UARTIntClear(UART0_BASE, ui32Status);

    while(UARTCharsAvail(UART0_BASE))
    {
     a = (char) UARTCharGetNonBlocking(UART0_BASE);
     if(a=='1')
         data_speed(FILTER0,0x508); // 5000ksps
     else if(a=='2')
         data_speed(FILTER0,0x509); // 2500ksps
     else if(a=='3')
         data_speed(FILTER0,0x50A); // 1000ksps
     else if(a=='4')
         data_speed(FILTER0,0x50B); // 500sps
     else if(a=='5')
         data_speed(FILTER0,0x50C); // 397.5sps
     else if(a=='6')
         data_speed(FILTER0,0x50D); // 200 sps
     else if(a=='7')
         data_speed(FILTER0,0x50E); // 100 sps
     else if(a=='8')
         data_speed(FILTER0,0x511); // 20 sps
     else if(a=='9')
         data_speed(FILTER0,0x514); // 5 sps



     SysCtlDelay(SysCtlClockGet()/30);//Only for debugging purposes
    }

}

void data_speed(int filter,int buffer)
{
    ID2 = Read16Register(FILTER0,1);
    UARTprintf("IF 1=%d\n",ID2);

    Write8Register(FILTER0-64); // Write to communications register indicating which register to access
    Write16Register(buffer); // Writing to the actual register
    ID2 = Read16Register(FILTER0,1);
    UARTprintf("IF 2=%d\n",ID2);
}



/*
 To read WL=32
  ID2 = Read16Register(IFMODE,1); // Reading ID Register
    UARTprintf("IF 1=%d\n",ID2);
    Write8Register(0x02);//Write to IFMODE register
    Write8Register(0x00);
    Write8Register(0x02);
    ID2 = Read16Register(IFMODE,1);
    UARTprintf("IF 2=%d\n",ID2);

 * */

